{"version":3,"sources":["locales/browserDetector.js","locales/i18n.js","components/AsyncComponent.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["detector","name","lookup","options","navigator","language","userLanguage","cacheUserLanguage","lng","languageDetector","LanguageDetector","addDetector","browserDetector","resources","en","en_us","zh","zh_cn","i18n","use","initReactI18next","init","detection","order","lookupQuerystring","lookupCookie","lookupLocalStorage","lookupFromPathIndex","lookupFromSubdomainIndex","caches","fallbackLng","keySeparator","interpolation","escapeValue","asyncComponent","importComponent","DynamicComponent","lazy","fallback","AsyncHome","AsyncFaq","AsyncNotFound","AsyncBrand","AsyncAmbassador","AsyncCommunity","AsyncBlog","AsyncBlogTutorials","AsyncBlogNewsletters","AsyncNews","AsyncEvents","AsyncReports","AsyncVideos","AsyncTech","AsyncModel","AsyncPlo","AsyncPloContrbite","history","createBrowserHistory","Routes","exact","component","path","App","className","Component","Boolean","window","location","hostname","match","TransApp","withTranslation","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae7480d8.chunk.js","sourcesContent":["const detector = {\n  name: \"browser\",\n\n  lookup(options) {\n    // options -> are passed in options\n    var userLang = navigator.language || navigator.userLanguage;\n    return userLang;\n  },\n\n  cacheUserLanguage(lng, options) {\n    // options -> are passed in options\n    // lng -> current language, will be called after init and on changeLanguage\n    // store it\n  },\n};\n\nexport default detector;\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport browserDetector from \"./browserDetector\";\n\nimport en_us from \"./en-us\";\nimport zh_cn from \"./zh-cn\";\n\nconst languageDetector = new LanguageDetector();\nlanguageDetector.addDetector(browserDetector);\n\n// the translations\n// (tip move them in a JSON file and import them)\nconst resources = {\n  en: {\n    ...en_us,\n  },\n  zh: {\n    ...zh_cn,\n  },\n};\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .use(languageDetector)\n  .init({\n    resources,\n    // lng: localStorage.getItem(\"lng\") || 'en-us',\n    detection: {\n      // order and from where user language should be detected\n      order: [\"querystring\", \"cookie\", \"localStorage\", \"browser\", \"navigator\", \"path\", \"subdomain\"],\n\n      // keys or params to lookup language from\n      lookupQuerystring: \"lng\",\n      lookupCookie: \"i18next\",\n      lookupLocalStorage: \"i18nextLng\",\n      lookupFromPathIndex: 0,\n      lookupFromSubdomainIndex: 0,\n\n      // cache user language on\n      caches: [\"localStorage\", \"cookie\"],\n\n      // optional htmlTag with lang attribute, the default is:\n    },\n    fallbackLng: [\"en\", \"zh\"],\n    keySeparator: false, // we do not use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  });\n\nexport default i18n;\n","import React, { lazy, Suspense } from \"react\";\n\nexport function asyncComponent(importComponent) {\n  const DynamicComponent = lazy(() => importComponent);\n\n  return () => (\n    <Suspense fallback={<div></div>}>\n      <DynamicComponent />\n    </Suspense>\n  );\n}\n","import React from \"react\";\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport { asyncComponent } from \"./components/AsyncComponent\";\nimport { createBrowserHistory } from \"history\";\nconst AsyncHome = asyncComponent(import(\"./page/Home\"));\nconst AsyncFaq = asyncComponent(import(\"./page/Faq\"));\nconst AsyncNotFound = asyncComponent(import(\"./page/NotFound\"));\nconst AsyncBrand = asyncComponent(import(\"./page/Brand\"));\nconst AsyncAmbassador = asyncComponent(import(\"./page/Ambassador\"));\nconst AsyncCommunity = asyncComponent(import(\"./page/Community\"));\nconst AsyncBlog = asyncComponent(import(\"./page/Blog\"));\nconst AsyncBlogTutorials = asyncComponent(import(\"./page/Blog/TutorialsPage\"));\nconst AsyncBlogNewsletters = asyncComponent(import(\"./page/Blog/NewslettersPage\"));\n// const AsyncMedia = asyncComponent(import(\"./page/Media\"));\nconst AsyncNews = asyncComponent(import(\"./page/News\"));\nconst AsyncEvents = asyncComponent(import(\"./page/Events\"));\nconst AsyncReports = asyncComponent(import(\"./page/Reports\"));\nconst AsyncVideos = asyncComponent(import(\"./page/Videos\"));\nconst AsyncTech = asyncComponent(import(\"./page/Tech\"));\nconst AsyncModel = asyncComponent(import(\"./page/EcoModel\"));\nconst AsyncPlo = asyncComponent(import(\"./page/Plo\"));\nconst AsyncPloContrbite = asyncComponent(import(\"./page/PloContribute\"));\nconst history = createBrowserHistory();\n\nconst Routes = () => (\n  <Router history={history}>\n    <Switch>\n      <Route exact component={AsyncHome} path=\"/\" />\n      <Route exact component={AsyncFaq} path=\"/faq\" />\n\n      <Route exact component={AsyncBrand} path=\"/brand\" />\n\n      <Route exact component={AsyncAmbassador} path=\"/ambassador\" />\n\n      <Route exact component={AsyncCommunity} path=\"/community\" />\n\n      <Route exact component={AsyncBlog} path=\"/blog\" />\n      <Route exact component={AsyncBlogTutorials} path=\"/blog/tutorials\" />\n      <Route exact component={AsyncBlogNewsletters} path=\"/blog/newsletters\" />\n\n      {/* <Route exact component={AsyncMedia} path=\"/media\" /> */}\n\n      <Route exact component={AsyncReports} path=\"/reports\" />\n\n      <Route exact component={AsyncEvents} path=\"/events\" />\n\n      <Route exact component={AsyncVideos} path=\"/videos\" />\n\n      <Route exact component={AsyncNews} path=\"/news\" />\n\n      <Route exact component={AsyncTech} path=\"/tech\" />\n\n      <Route exact component={AsyncModel} path=\"/economic_model\" />\n\n      <Route exact component={AsyncPlo} path=\"/plo\" />\n\n      <Route exact component={AsyncPloContrbite} path=\"/plo_contribute\" />\n\n      <Route component={AsyncNotFound} />\n    </Switch>\n  </Router>\n);\n\nexport default Routes;\n","import React, { Component } from \"react\";\nimport Routes from \"./Routes\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Routes />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./locales/i18n\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { withTranslation } from \"react-i18next\";\n\nconst TransApp = withTranslation()(App);\nReactDOM.render(<TransApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}